// Generated by gencpp from file random_gen_x/control_msg.msg
// DO NOT EDIT!


#ifndef RANDOM_GEN_X_MESSAGE_CONTROL_MSG_H
#define RANDOM_GEN_X_MESSAGE_CONTROL_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace random_gen_x
{
template <class ContainerAllocator>
struct control_msg_
{
  typedef control_msg_<ContainerAllocator> Type;

  control_msg_()
    : rand_x()
    , rand_y()
    , rand_yaw()  {
    }
  control_msg_(const ContainerAllocator& _alloc)
    : rand_x(_alloc)
    , rand_y(_alloc)
    , rand_yaw(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _rand_x_type;
  _rand_x_type rand_x;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _rand_y_type;
  _rand_y_type rand_y;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _rand_yaw_type;
  _rand_yaw_type rand_yaw;





  typedef boost::shared_ptr< ::random_gen_x::control_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::random_gen_x::control_msg_<ContainerAllocator> const> ConstPtr;

}; // struct control_msg_

typedef ::random_gen_x::control_msg_<std::allocator<void> > control_msg;

typedef boost::shared_ptr< ::random_gen_x::control_msg > control_msgPtr;
typedef boost::shared_ptr< ::random_gen_x::control_msg const> control_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::random_gen_x::control_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::random_gen_x::control_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::random_gen_x::control_msg_<ContainerAllocator1> & lhs, const ::random_gen_x::control_msg_<ContainerAllocator2> & rhs)
{
  return lhs.rand_x == rhs.rand_x &&
    lhs.rand_y == rhs.rand_y &&
    lhs.rand_yaw == rhs.rand_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::random_gen_x::control_msg_<ContainerAllocator1> & lhs, const ::random_gen_x::control_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace random_gen_x

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::random_gen_x::control_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::random_gen_x::control_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::random_gen_x::control_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::random_gen_x::control_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::random_gen_x::control_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::random_gen_x::control_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::random_gen_x::control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "76856e6a7501ff768ebedc7d6ea94795";
  }

  static const char* value(const ::random_gen_x::control_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x76856e6a7501ff76ULL;
  static const uint64_t static_value2 = 0x8ebedc7d6ea94795ULL;
};

template<class ContainerAllocator>
struct DataType< ::random_gen_x::control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "random_gen_x/control_msg";
  }

  static const char* value(const ::random_gen_x::control_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::random_gen_x::control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 rand_x\n"
"std_msgs/Float64 rand_y\n"
"std_msgs/Float64 rand_yaw\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::random_gen_x::control_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::random_gen_x::control_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rand_x);
      stream.next(m.rand_y);
      stream.next(m.rand_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct control_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::random_gen_x::control_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::random_gen_x::control_msg_<ContainerAllocator>& v)
  {
    s << indent << "rand_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.rand_x);
    s << indent << "rand_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.rand_y);
    s << indent << "rand_yaw: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.rand_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANDOM_GEN_X_MESSAGE_CONTROL_MSG_H
